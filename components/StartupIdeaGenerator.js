import React, { useState, useEffect } from 'react';
import { Lightbulb, Target, DollarSign, RefreshCw, ArrowRight, Plus, User, LogOut, Home, Coins } from 'lucide-react';
import { useUser, SignOutButton, RedirectToSignIn, UserButton } from '@clerk/nextjs';
import { useRouter } from 'next/router';

const StartupIdeaGenerator = () => {
  const { isLoaded, isSignedIn, user } = useUser();
  const router = useRouter();
  
  const [inputs, setInputs] = useState({
    problem: '',
    solution: '',
    targetAudience: '',
    validationPlatforms: [],
    timeline: ''
  });
  const [generatedIdea, setGeneratedIdea] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [expandedRoadmap, setExpandedRoadmap] = useState(false);
  const [isRewriting, setIsRewriting] = useState({
    mvpFeatures: false,
    tools: false,
    validation: false,
    weeklyPlan: false,
    goToMarket: false
  });
  const [isApproving, setIsApproving] = useState(false);
  const [isApproved, setIsApproved] = useState(false);
  const [userTokens, setUserTokens] = useState(0);

  // Redirect to sign-in if not authenticated
  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      router.push('/sign-in');
    } else if (isLoaded && isSignedIn) {
      fetchUserTokens();
    }
  }, [isLoaded, isSignedIn, router]);

  const fetchUserTokens = async () => {
    try {
      const response = await fetch('/api/get-user-tokens');
      if (response.ok) {
        const data = await response.json();
        setUserTokens(data.tokens);
      }
    } catch (error) {
      console.error('Error fetching tokens:', error);
    }
  };

  // Show loading while Clerk is initializing
  if (!isLoaded) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="w-8 h-8 animate-spin text-black mx-auto mb-4" />
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  // Show loading if redirecting to sign-in
  if (!isSignedIn) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="w-8 h-8 animate-spin text-black mx-auto mb-4" />
          <p className="text-gray-600">Redirecting to sign-in...</p>
        </div>
      </div>
    );
  }

  const handleInputChange = (field, value) => {
    setInputs(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handlePlatformChange = (platform) => {
    setInputs(prev => ({
      ...prev,
      validationPlatforms: prev.validationPlatforms.includes(platform)
        ? prev.validationPlatforms.filter(p => p !== platform)
        : [...prev.validationPlatforms, platform]
    }));
  };

  const exportToPDF = async () => {
    const reportHTML = `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>${generatedIdea.name} - Startup Report</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; color: #333; }
    h1 { color: #000; border-bottom: 2px solid #000; padding-bottom: 10px; }
    h2 { color: #333; margin-top: 30px; }
    h3 { color: #666; }
    .section { margin-bottom: 25px; }
    .badge { background: #f0f0f0; padding: 4px 8px; border-radius: 12px; font-size: 12px; }
    table { width: 100%; border-collapse: collapse; margin: 15px 0; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #f5f5f5; }
    .tools-grid { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; }
  </style>
</head>
<body>
  <h1>${generatedIdea.name}</h1>
  <div class="badge">#${generatedIdea.sector}</div>

  <div class="section">
    <h2>Description</h2>
    <p>${generatedIdea.description}</p>
  </div>

  <div class="section">
    <h2>Your Foundation</h2>
    <p><strong>Problem:</strong> ${generatedIdea.userInputs?.problem || ''}</p>
    <p><strong>Solution:</strong> ${generatedIdea.userInputs?.solution || ''}</p>
    <p><strong>Target Audience:</strong> ${generatedIdea.userInputs?.targetAudience || ''}</p>
  </div>

  <div class="section">
    <h2>Business Model</h2>
    <p><strong>Revenue Model:</strong> ${generatedIdea.revenueModel}</p>
    <p><strong>Market Size:</strong> ${generatedIdea.marketSize}</p>
    <p><strong>Competition:</strong> ${generatedIdea.competition}</p>
    <p><strong>Funding Needs:</strong> ${generatedIdea.fundingNeeds}</p>
  </div>

  <div class="section">
    <h2>MVP Features</h2>
    <ul>
      ${generatedIdea.mvpFeatures?.map(feature => `<li>${feature}</li>`).join('') || ''}
    </ul>
  </div>

  <div class="section">
    <h2>Go-to-Market Strategy</h2>
    <p>${generatedIdea.goToMarket}</p>
  </div>

  <p style="margin-top: 50px; text-align: center; color: #999; font-size: 12px;">
    Generated by Startup Idea Generator on ${new Date().toLocaleDateString()}
  </p>
</body>
</html>`;

    const blob = new Blob([reportHTML], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${generatedIdea.name.replace(/\s+/g, '_')}_Startup_Report.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    alert('HTML file downloaded! Open it in your browser and use Ctrl+P (or Cmd+P) â†’ "Save as PDF" to convert to PDF.');
  };

  const shareIdea = async () => {
    const shareText = `ðŸš€ Just generated my startup idea: ${generatedIdea.name}\n\n${generatedIdea.description}\n\nGenerated with Startup Idea Generator`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: `${generatedIdea.name} - Startup Idea`,
          text: shareText,
          url: window.location.href
        });
      } catch (err) {
        console.log('Share cancelled');
      }
    } else {
      navigator.clipboard.writeText(shareText);
      alert('Startup idea copied to clipboard!');
    }
  };

  const rewriteSection = async (section) => {
    setIsRewriting(prev => ({ ...prev, [section]: true }));

    try {
      const response = await fetch('/api/rewrite-section', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          section,
          currentIdea: generatedIdea,
          inputs: inputs
        })
      });

      if (!response.ok) {
        throw new Error(`Failed to rewrite ${section}`);
      }

      const updatedSection = await response.json();

      setGeneratedIdea(prev => ({
        ...prev,
        [section]: updatedSection[section]
      }));
    } catch (error) {
      console.error('Error:', error);
      alert(`Failed to rewrite ${section}. Please try again.`);
    } finally {
      setIsRewriting(prev => ({ ...prev, [section]: false }));
    }
  };

  const rewriteIdea = async () => {
    setIsRewriting(prev => ({ ...prev, full: true }));

    try {
      const response = await fetch('/api/generate-idea', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          problem: inputs.problem,
          solution: inputs.solution,
          targetAudience: inputs.targetAudience,
          validationPlatforms: inputs.validationPlatforms,
          timeline: inputs.timeline
        })
      });

      if (!response.ok) {
        throw new Error('Failed to rewrite idea');
      }

      const newIdea = await response.json();

      setGeneratedIdea({
        ...newIdea,
        userInputs: { ...inputs }
      });
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to rewrite idea. Please try again.');
    } finally {
      setIsRewriting(prev => ({ ...prev, full: false }));
    }
  };

  const platforms = ['Twitter', 'Instagram', 'TikTok', 'YouTube', 'Facebook', 'Reddit', 'Discord'];
  const timelineOptions = [
    { value: '4', label: '4 weeks (MVP Sprint)' },
    { value: '8', label: '8 weeks (Quick Launch)' },
    { value: '12', label: '12 weeks (Standard)' },
    { value: '16', label: '16 weeks (Comprehensive)' },
    { value: '20', label: '20 weeks (Enterprise-ready)' },
    { value: '24', label: '24 weeks (Full Platform)' }
  ];

  const generateStartupIdea = async () => {
    if (!inputs.problem || !inputs.solution || !inputs.targetAudience || inputs.validationPlatforms.length === 0 || !inputs.timeline) {
      alert('Please fill in all fields and select at least one validation platform');
      return;
    }

    setIsGenerating(true);

    try {
      const response = await fetch('/api/generate-idea', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          problem: inputs.problem,
          solution: inputs.solution,
          targetAudience: inputs.targetAudience,
          validationPlatforms: inputs.validationPlatforms,
          timeline: inputs.timeline
        })
      });

      if (!response.ok) {
        throw new Error('Failed to generate idea');
      }

      const idea = await response.json();

      setGeneratedIdea({
        ...idea,
        userInputs: { ...inputs }
      });
      
      // Refresh token count after successful generation
      fetchUserTokens();
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to generate idea. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const approveIdea = async () => {
    if (!generatedIdea) return;

    setIsApproving(true);

    try {
      const response = await fetch('/api/approve-idea', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          idea: generatedIdea,
          inputs: inputs
        })
      });

      if (!response.ok) {
        throw new Error('Failed to approve idea');
      }

      const result = await response.json();
      setIsApproved(true);
      
      // Show success message
      alert('ðŸŽ‰ Idea approved and saved to My Ideas!');
      
    } catch (error) {
      console.error('Error approving idea:', error);
      alert('Failed to approve idea. Please try again.');
    } finally {
      setIsApproving(false);
    }
  };

  const resetForm = () => {
    setInputs({
      problem: '',
      solution: '',
      targetAudience: '',
      validationPlatforms: [],
      timeline: ''
    });
    setGeneratedIdea(null);
    setIsApproved(false);
  };

  return (
    <div className="min-h-screen bg-white text-black">
      <div className="max-w-4xl mx-auto p-8">
        {/* Header with User Info - Single Block */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-12">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <Lightbulb className="w-8 h-8 text-black mr-3" />
              <div>
                <h1 className="text-3xl font-bold">Advanced Startup Generator</h1>
                <p className="text-gray-600 text-sm mt-1">Define your problem, solution, and audience to generate your comprehensive startup plan</p>
              </div>
            </div>
            
            {/* User Menu */}
            {isLoaded && isSignedIn && (
              <div className="flex items-center gap-3">
                <button
                  onClick={() => router.push('/home')}
                  className="flex items-center gap-2 px-3 py-2 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium"
                >
                  <Home className="w-4 h-4" />
                  Home
                </button>
                
                <div className="flex items-center gap-2 px-3 py-2 bg-indigo-50 rounded-lg border border-indigo-200">
                  <Coins className="w-4 h-4 text-indigo-600" />
                  <span className="text-sm font-medium text-indigo-700">
                    {userTokens.toLocaleString()} tokens
                  </span>
                </div>
                
                <div className="flex items-center gap-2 px-3 py-2 bg-gray-100 rounded-lg">
                  <User className="w-4 h-4" />
                  <span className="text-sm font-medium">
                    {user.firstName || user.emailAddresses[0].emailAddress}
                  </span>
                </div>
                
                <UserButton 
                  appearance={{
                    elements: {
                      avatarBox: "w-8 h-8"
                    }
                  }}
                  afterSignOutUrl="/"
                />
              </div>
            )}
          </div>
        </div>

        {!generatedIdea ? (
          /* Input Form */
          <div className="space-y-8">
            <div className="grid gap-6">
              <div>
                <label className="block text-sm font-medium mb-3">
                  What problem are you solving?
                </label>
                <textarea
                  value={inputs.problem}
                  onChange={(e) => handleInputChange('problem', e.target.value)}
                  placeholder="e.g., People struggle to track their daily water intake..."
                  className="w-full p-4 border-2 border-gray-200 rounded-lg focus:border-black focus:outline-none resize-none h-24"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-3">
                  What's your solution?
                </label>
                <textarea
                  value={inputs.solution}
                  onChange={(e) => handleInputChange('solution', e.target.value)}
                  placeholder="e.g., A smart water bottle that automatically tracks consumption..."
                  className="w-full p-4 border-2 border-gray-200 rounded-lg focus:border-black focus:outline-none resize-none h-24"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-3">
                  Who is your target audience?
                </label>
                <textarea
                  value={inputs.targetAudience}
                  onChange={(e) => handleInputChange('targetAudience', e.target.value)}
                  placeholder="e.g., Health-conscious professionals aged 25-40..."
                  className="w-full p-4 border-2 border-gray-200 rounded-lg focus:border-black focus:outline-none resize-none h-24"
                />
              </div>

              {/* Validation Platforms */}
              <div>
                <label className="block text-sm font-medium mb-3">
                  Which platforms do you want to use for validation?
                </label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {platforms.map((platform) => (
                    <label key={platform} className="flex items-center space-x-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={inputs.validationPlatforms.includes(platform)}
                        onChange={() => handlePlatformChange(platform)}
                        className="w-4 h-4 text-black border-gray-300 rounded focus:ring-black"
                      />
                      <span className="text-sm">{platform}</span>
                    </label>
                  ))}
                </div>
              </div>

              {/* Timeline */}
              <div>
                <label className="block text-sm font-medium mb-3">
                  How many weeks do you want to develop this?
                </label>
                <select
                  value={inputs.timeline}
                  onChange={(e) => handleInputChange('timeline', e.target.value)}
                  className="w-full p-4 border-2 border-gray-200 rounded-lg focus:border-black focus:outline-none"
                >
                  <option value="">Select development timeline...</option>
                  {timelineOptions.map((option) => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="text-center">
              <button
                onClick={generateStartupIdea}
                disabled={isGenerating || !inputs.problem || !inputs.solution || !inputs.targetAudience || inputs.validationPlatforms.length === 0 || !inputs.timeline}
                className="inline-flex items-center px-8 py-4 bg-black text-white font-medium rounded-lg hover:bg-gray-800 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200"
              >
                {isGenerating ? (
                  <>
                    <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
                    Generating Your Startup Idea...
                  </>
                ) : (
                  <>
                    <Plus className="w-5 h-5 mr-2" />
                    Generate Startup Idea
                  </>
                )}
              </button>
            </div>
          </div>
        ) : (
          /* Generated Idea */
          <div className="space-y-6">
            <div className="text-center">
              <div className="inline-flex items-center px-3 py-1 bg-gray-100 rounded-full text-sm font-medium mb-4">
                #{generatedIdea.sector}
              </div>
              <h2 className="text-3xl font-bold mb-2">{generatedIdea.name}</h2>
              <p className="text-gray-600 text-lg leading-relaxed">{generatedIdea.description}</p>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              {/* User Inputs */}
              <div className="space-y-4">
                <h3 className="text-xl font-semibold">Your Foundation</h3>

                <div className="border-l-4 border-gray-200 pl-4">
                  <h4 className="font-medium text-gray-700 mb-1">Problem</h4>
                  <p className="text-gray-600">{generatedIdea.userInputs?.problem}</p>
                </div>

                <div className="border-l-4 border-gray-200 pl-4">
                  <h4 className="font-medium text-gray-700 mb-1">Solution</h4>
                  <p className="text-gray-600">{generatedIdea.userInputs?.solution}</p>
                </div>

                <div className="border-l-4 border-gray-200 pl-4">
                  <h4 className="font-medium text-gray-700 mb-1">Target Audience</h4>
                  <p className="text-gray-600">{generatedIdea.userInputs?.targetAudience}</p>
                </div>
              </div>

              {/* Generated Insights */}
              <div className="space-y-4">
                <h3 className="text-xl font-semibold">Business Model</h3>

                <div className="space-y-3">
                  <div>
                    <h4 className="font-medium flex items-center mb-1">
                      <DollarSign className="w-4 h-4 mr-1" />
                      Revenue Model
                    </h4>
                    <p className="text-gray-600 text-sm">{generatedIdea.revenueModel}</p>
                  </div>

                  <div>
                    <h4 className="font-medium flex items-center mb-1">
                      <Target className="w-4 h-4 mr-1" />
                      Market Size
                    </h4>
                    <p className="text-gray-600 text-sm">{generatedIdea.marketSize}</p>
                  </div>

                  <div>
                    <h4 className="font-medium mb-1">Competition Level</h4>
                    <p className="text-gray-600 text-sm">{generatedIdea.competition}</p>
                  </div>

                  {generatedIdea.fundingNeeds && (
                    <div>
                      <h4 className="font-medium mb-1">Funding Needs</h4>
                      <p className="text-gray-600 text-sm">{generatedIdea.fundingNeeds}</p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* MVP Features */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-xl font-semibold">Suggested MVP Features</h3>
                <button
                  onClick={() => rewriteSection('mvpFeatures')}
                  disabled={isRewriting.mvpFeatures}
                  className="inline-flex items-center px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 disabled:opacity-50 transition-colors"
                >
                  {isRewriting.mvpFeatures ? (
                    <RefreshCw className="w-3 h-3 mr-1 animate-spin" />
                  ) : (
                    <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                  )}
                  {isRewriting.mvpFeatures ? 'Rewriting...' : 'Rewrite'}
                </button>
              </div>
              <div className="grid md:grid-cols-2 gap-2">
                {generatedIdea.mvpFeatures?.map((feature, index) => (
                  <div key={index} className="flex items-center text-gray-600">
                    <ArrowRight className="w-4 h-4 mr-2 text-gray-400" />
                    {feature}
                  </div>
                ))}
              </div>
            </div>

            {/* Recommended Tools */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-xl font-semibold">Recommended Tools</h3>
                <button
                  onClick={() => rewriteSection('tools')}
                  disabled={isRewriting.tools}
                  className="inline-flex items-center px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 disabled:opacity-50 transition-colors"
                >
                  {isRewriting.tools ? (
                    <RefreshCw className="w-3 h-3 mr-1 animate-spin" />
                  ) : (
                    <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                  )}
                  {isRewriting.tools ? 'Rewriting...' : 'Rewrite'}
                </button>
              </div>
              <div className="grid md:grid-cols-3 gap-4">
                <div>
                  <h4 className="font-medium text-gray-700 mb-2">Development</h4>
                  <div className="space-y-1 text-sm text-gray-600">
                    {generatedIdea.tools?.development?.map((tool, index) => (
                      <div key={index}>{tool}</div>
                    ))}
                  </div>
                </div>
                <div>
                  <h4 className="font-medium text-gray-700 mb-2">Design & Analytics</h4>
                  <div className="space-y-1 text-sm text-gray-600">
                    {generatedIdea.tools?.design?.map((tool, index) => (
                      <div key={index}>{tool}</div>
                    ))}
                  </div>
                </div>
                <div>
                  <h4 className="font-medium text-gray-700 mb-2">Operations</h4>
                  <div className="space-y-1 text-sm text-gray-600">
                    {generatedIdea.tools?.operations?.map((tool, index) => (
                      <div key={index}>{tool}</div>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* Validation Strategy */}
            <div>
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-xl font-semibold">Validation Strategy</h3>
                <button
                  onClick={() => rewriteSection('validation')}
                  disabled={isRewriting.validation}
                  className="inline-flex items-center px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 disabled:opacity-50 transition-colors"
                >
                  {isRewriting.validation ? (
                    <RefreshCw className="w-3 h-3 mr-1 animate-spin" />
                  ) : (
                    <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                  )}
                  {isRewriting.validation ? 'Rewriting...' : 'Rewrite'}
                </button>
              </div>
              <div className="grid md:grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium text-gray-700 mb-2">Recommended Platforms</h4>
                  <div className="flex flex-wrap gap-2">
                    {generatedIdea.validation?.platforms?.map((platform, index) => (
                      <span key={index} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                        {platform}
                      </span>
                    ))}
                  </div>
                </div>
                <div>
                  <h4 className="font-medium text-gray-700 mb-2">Success Metrics</h4>
                  <div className="space-y-1 text-sm text-gray-600">
                    {generatedIdea.validation?.metrics?.map((metric, index) => (
                      <div key={index}>â€¢ {metric}</div>
                    ))}
                  </div>
                </div>
              </div>
              {generatedIdea.validation?.platformStrategies && (
                <div className="mt-4">
                  <h4 className="font-medium text-gray-700 mb-3">Platform-Specific Content Strategy</h4>
                  <div className="space-y-3">
                    {generatedIdea.validation.platformStrategies.map((platformStrategy, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-3">
                        <div className="flex items-center mb-2">
                          <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-medium mr-2">
                            {platformStrategy.platform}
                          </span>
                          <span className="text-sm text-gray-600">{platformStrategy.frequency}</span>
                        </div>
                        <p className="text-sm text-gray-700 mb-2">{platformStrategy.strategy}</p>
                        <div>
                          <h5 className="text-xs font-medium text-gray-600 mb-1">Content Ideas:</h5>
                          <ul className="text-xs text-gray-600 space-y-1">
                            {platformStrategy.contentIdeas?.map((idea, idx) => (
                              <li key={idx}>â€¢ {idea}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Weekly Roadmap */}
            {generatedIdea.weeklyPlan && (
              <div>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-xl font-semibold">{inputs.timeline}-Week Launch Roadmap</h3>
                  <div className="flex gap-2">
                    <button
                      onClick={() => rewriteSection('weeklyPlan')}
                      disabled={isRewriting.weeklyPlan}
                      className="inline-flex items-center px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 disabled:opacity-50 transition-colors"
                    >
                      {isRewriting.weeklyPlan ? (
                        <RefreshCw className="w-3 h-3 mr-1 animate-spin" />
                      ) : (
                        <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                      )}
                      {isRewriting.weeklyPlan ? 'Rewriting...' : 'Rewrite'}
                    </button>
                    {generatedIdea.weeklyPlan.length > 4 && (
                      <button
                        onClick={() => setExpandedRoadmap(!expandedRoadmap)}
                        className="px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded-full hover:bg-blue-200 transition-colors"
                      >
                        {expandedRoadmap ? 'Show Less' : `Show All ${generatedIdea.weeklyPlan.length} Weeks`}
                      </button>
                    )}
                  </div>
                </div>
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse border border-gray-300">
                    <thead>
                      <tr className="bg-gray-50">
                        <th className="border border-gray-300 px-4 py-2 text-left font-medium">Week</th>
                        <th className="border border-gray-300 px-4 py-2 text-left font-medium">Focus Area</th>
                        <th className="border border-gray-300 px-4 py-2 text-left font-medium">Key Tasks</th>
                        <th className="border border-gray-300 px-4 py-2 text-left font-medium">Deliverables</th>
                        <th className="border border-gray-300 px-4 py-2 text-left font-medium">Success Metrics</th>
                      </tr>
                    </thead>
                    <tbody>
                      {(expandedRoadmap ? generatedIdea.weeklyPlan : generatedIdea.weeklyPlan.slice(0, 4)).map((week, index) => (
                        <tr key={index} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-25'}>
                          <td className="border border-gray-300 px-4 py-2 font-medium">Week {week.week}</td>
                          <td className="border border-gray-300 px-4 py-2 text-sm">{week.focus}</td>
                          <td className="border border-gray-300 px-4 py-2 text-sm">
                            <ul className="space-y-1">
                              {week.tasks?.map((task, idx) => (
                                <li key={idx}>â€¢ {task}</li>
                              ))}
                            </ul>
                          </td>
                          <td className="border border-gray-300 px-4 py-2 text-sm">
                            <ul className="space-y-1">
                              {week.deliverables?.map((deliverable, idx) => (
                                <li key={idx}>â€¢ {deliverable}</li>
                              ))}
                            </ul>
                          </td>
                          <td className="border border-gray-300 px-4 py-2 text-sm">{week.metrics}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Go-to-Market Strategy */}
            {generatedIdea.goToMarket && (
              <div>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-xl font-semibold">Go-to-Market Strategy</h3>
                  <button
                    onClick={() => rewriteSection('goToMarket')}
                    disabled={isRewriting.goToMarket}
                    className="inline-flex items-center px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200 disabled:opacity-50 transition-colors"
                  >
                    {isRewriting.goToMarket ? (
                      <RefreshCw className="w-3 h-3 mr-1 animate-spin" />
                    ) : (
                      <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                      </svg>
                    )}
                    {isRewriting.goToMarket ? 'Rewriting...' : 'Rewrite'}
                  </button>
                </div>
                {generatedIdea.marketingChannels && generatedIdea.contentPlan ? (
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium text-gray-700 mb-3">Marketing Channels</h4>
                      <div className="space-y-3">
                        {generatedIdea.marketingChannels.map((channel, index) => (
                          <div key={index} className="border-l-4 border-green-200 pl-3">
                            <h5 className="font-medium text-sm">{channel.channel}</h5>
                            <p className="text-sm text-gray-600 mb-1">{channel.strategy}</p>
                            <div className="text-xs text-gray-500">
                              <strong>Budget:</strong> {channel.budget} | <strong>Timeline:</strong> {channel.timeline}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                    <div>
                      <h4 className="font-medium text-gray-700 mb-3">Content Creation Plan</h4>
                      <div className="space-y-3">
                        {generatedIdea.contentPlan.map((content, index) => (
                          <div key={index} className="bg-gray-50 p-3 rounded">
                            <h5 className="font-medium text-sm mb-1">{content.type}</h5>
                            <p className="text-sm text-gray-600 mb-2">{content.description}</p>
                            <div className="flex justify-between text-xs text-gray-500">
                              <span><strong>Frequency:</strong> {content.frequency}</span>
                              <span><strong>Platform:</strong> {content.platforms?.join(', ')}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : null}
                <div className="mt-4">
                  <h4 className="font-medium text-gray-700 mb-2">Overall Strategy</h4>
                  <p className="text-gray-600 bg-gray-50 p-4 rounded-lg">{generatedIdea.goToMarket}</p>
                </div>
              </div>
            )}

            {/* Actions */}
            <div className="flex justify-center flex-wrap gap-3 pt-6 border-t">
              {/* Approve This Idea Button */}
              <button
                onClick={approveIdea}
                disabled={isApproving || isApproved}
                className={`inline-flex items-center px-6 py-3 font-medium rounded-lg transition-colors duration-200 ${
                  isApproved 
                    ? 'bg-green-100 text-green-800 cursor-default' 
                    : 'bg-indigo-600 text-white hover:bg-indigo-700 disabled:opacity-50'
                }`}
              >
                {isApproving ? (
                  <>
                    <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
                    Approving...
                  </>
                ) : isApproved ? (
                  <>
                    <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    Approved & Saved
                  </>
                ) : (
                  <>
                    <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                    </svg>
                    Approve This Idea
                  </>
                )}
              </button>

              <button
                onClick={shareIdea}
                className="inline-flex items-center px-4 py-2 bg-blue-100 text-blue-800 font-medium rounded-lg hover:bg-blue-200 transition-colors duration-200"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                </svg>
                Share
              </button>

              <button
                onClick={exportToPDF}
                className="inline-flex items-center px-4 py-2 bg-green-100 text-green-800 font-medium rounded-lg hover:bg-green-200 transition-colors duration-200"
              >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Export PDF
              </button>

              <button
                onClick={rewriteIdea}
                disabled={isRewriting.full}
                className="inline-flex items-center px-4 py-2 bg-orange-100 text-orange-800 font-medium rounded-lg hover:bg-orange-200 disabled:opacity-50 transition-colors duration-200"
              >
                {isRewriting.full ? (
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                )}
                {isRewriting.full ? 'Rewriting...' : 'Rewrite All'}
              </button>

              <button
                onClick={generateStartupIdea}
                className="px-4 py-2 border-2 border-black text-black font-medium rounded-lg hover:bg-black hover:text-white transition-colors duration-200"
              >
                Generate Another
              </button>

              <button
                onClick={resetForm}
                className="px-4 py-2 bg-black text-white font-medium rounded-lg hover:bg-gray-800 transition-colors duration-200"
              >
                Start Over
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default StartupIdeaGenerator;